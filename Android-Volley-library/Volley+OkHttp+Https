Android网络--我是怎么做的: Volley+OkHttp+Https  :http://mdsa.51cto.com/art/201507/486433.htm

使用 OkHttp 作为传输层的实现.

Volley 默认根据 Android 系统版本使用不同的 Http 传输协议实现.
在 Android 3.0 以上 Volley 使用 ApacheHttpStack 作为传输协议, 在2.3 及以下使用 HttpURLConnection 作为传输层协议

OkHttp 相较于其它的实现有以下的优点.

支持SPDY，允许连接同一主机的所有请求分享一个socket。
如果SPDY不可用，会使用连接池减少请求延迟。
使用GZIP压缩下载内容，且压缩操作对用户是透明的。
利用响应缓存来避免重复的网络请求。
当网络出现问题的时候，OKHttp会依然有效，它将从常见的连接问题当中恢复。
如果你的服务端有多个IP地址，当第一个地址连接失败时，OKHttp会尝试连接其他的地址，这对IPV4和IPV6以及寄宿在多个数据中心的服务而言，是非常有必要的。
因此使用 OkHttp 作为替代是好的选择.

首先用 OkHttp 实现一个新的 HurlStack 用于构建 Volley 的 requestQueue.

public class OkHttpStack extends HurlStack {

 private OkHttpClient okHttpClient;

 /**
  * Create a OkHttpStack with default OkHttpClient.
  */
 public OkHttpStack() {
     this(new OkHttpClient());
 }

 /**
  * Create a OkHttpStack with a custom OkHttpClient
  * @param okHttpClient Custom OkHttpClient, NonNull
  */
 public OkHttpStack(OkHttpClient okHttpClient) {
     this.okHttpClient = okHttpClient;
 }

 @Override
 protected HttpURLConnection createConnection(URL url) throws IOException {
     OkUrlFactory okUrlFactory = new OkUrlFactory(okHttpClient);
     return okUrlFactory.open(url);
 }
}
然后使用 OkHttpStack 创建新的 Volley requestQueue.

requestQueue = Volley.newRequestQueue(getContext(), new OkHttpStack());
requestQueue.start();
这样就行了.